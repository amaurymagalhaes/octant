variables:
  KANIKO_VERSION: v1.9.2
  FF_USE_FASTZIP: "true"
  CACHE_COMPRESSION_LEVEL: "fast"
  TRANSFER_METER_FREQUENCY: "2s"
  IMAGE_TAG: $CI_COMMIT_SHA

stages:
  - build
  - lint_and_typecheck
  - test
  - publish
  - e2e
  - deploy
  - cleanup

default:
  tags:
    - metal
  interruptible: true

.images:
  python:
    name: acidrain/python-poetry:3.11-slim-1.5.1
    pull_policy: if-not-present
  node:
    name: registry.gitlab.com/wildland/devops/container-builder/octant/node-extended:latest
    pull_policy: if-not-present
  kaniko:
    name: gcr.io/kaniko-project/executor:$KANIKO_VERSION-debug
    pull_policy: if-not-present
    entrypoint: [""]
  git_improved:
    name: mikecode/git-gettext:ubuntu
    pull_policy: if-not-present
  synpress:
    name: registry.gitlab.com/wildland/devops/container-builder/octant/synpress-arch:179ba913
    pull_policy: if-not-present

.rules:
  on_mr:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
  on_push_to_default_branch:
    - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  on_push_to_default_branch_manual:
    - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      when: manual
      allow_failure: true
  on_mr_manual:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: manual
      allow_failure: true


.scripts:
  install_packages:
    - apt update && apt install -y --no-install-recommends git ca-certificates
  install_libpq5:
    - apt update && apt install -y --no-install-recommends libpq5
  yarn_install:
    - yarn install --cache-folder .yarn --non-interactive --frozen-lockfile

Build backend:
  stage: build
  image: !reference [.images, python ]
  rules:
    - !reference [.rules, on_mr ]
    - !reference [.rules, on_push_to_default_branch ]
  script:
    - !reference [.scripts, install_packages]
    - ci/build_backend.sh
  cache:
    - key: $CI_COMMIT_REF_SLUG-poetry-backend
      policy: push
      paths:
        - backend/.venv

Build contracts:
  stage: build
  image: !reference [.images, node ]
  rules:
    - !reference [.rules, on_mr ]
    - !reference [.rules, on_push_to_default_branch ]
  script:
    - !reference [.scripts, install_packages]
    - ci/build_root.sh
    - ci/build_contracts.sh
    - ci/build_contracts_v1.sh
  cache:
    - key: $CI_COMMIT_REF_SLUG-yarn-root
      paths:
        - node_modules
        - .yarn
    - key: $CI_COMMIT_REF_SLUG-yarn-contracts
      paths:
        - contracts/.yarn
        - contracts/node_modules
        - contracts-v1/.yarn
        - contracts-v1/node_modules
  artifacts:
    name: contracts
    paths:
      - contracts/artifacts
      - contracts/typechain
      - contracts-v1/artifacts
      - contracts-v1/typechain
    expire_in: 30 days

Build services:
  stage: build
  image: !reference [.images, node ]
  parallel:
    matrix:
      - SERVICE:
          - client
          - coin-prices-server
          - subgraph
  rules:
    - !reference [.rules, on_mr ]
    - !reference [.rules, on_push_to_default_branch ]
  dependencies:
    - Build contracts
  needs:
    - Build contracts
  script:
    - !reference [.scripts, install_packages]
    - ci/build_$SERVICE.sh
  cache:
    - key: $CI_COMMIT_REF_SLUG-yarn-root
      paths:
        - node_modules
        - .yarn
      policy: pull
    - key: $CI_COMMIT_REF_SLUG-yarn-$SERVICE
      paths:
        - $SERVICE/.yarn
        - $SERVICE/node-modules

Lint and typecheck:
  stage: lint_and_typecheck
  image: !reference [.images, node ]
  parallel:
    matrix:
      - SERVICE:
          - contracts
          - contracts-v1
          - client
          - coin-prices-server
          - subgraph
  rules:
    - !reference [.rules, on_mr ]
    - !reference [.rules, on_push_to_default_branch ]
  script:
    - cd $SERVICE
    - !reference [ .scripts, yarn_install ]
    - yarn eslint
    - yarn type-check
  cache:
    - key: $CI_COMMIT_REF_SLUG-yarn-root
      paths:
        - node_modules
        - .yarn
      policy: pull
    - key: $CI_COMMIT_REF_SLUG-yarn-$SERVICE
      paths:
        - $SERVICE/.yarn
        - $SERVICE/node-modules
      policy: pull

Backend tests:
  stage: test
  image: !reference [.images, python ]
  rules:
    - !reference [.rules, on_mr ]
    - !reference [.rules, on_push_to_default_branch ]
  dependencies:
    - Build backend
  script:
    - cd backend
    - poetry config virtualenvs.in-project true
    - poetry run pytest
  cache:
    - key: $CI_COMMIT_REF_SLUG-poetry-backend
      policy: pull
      paths:
        - backend/.venv

Unit tests:
  stage: test
  image: !reference [.images, node ]
  parallel:
    matrix:
      - SERVICE:
          - contracts
          - contracts-v1
          - client
          - coin-prices-server
          - subgraph
  rules:
    - !reference [.rules, on_mr ]
    - !reference [.rules, on_push_to_default_branch ]
  dependencies:
    - Build contracts
  script:
    - cd $SERVICE
    - !reference [ .scripts, install_libpq5 ]
    - !reference [ .scripts, yarn_install ]
    - yarn test
  cache:
    - key: $CI_COMMIT_REF_SLUG-yarn-root
      paths:
        - node_modules
        - .yarn
      policy: pull
    - key: $CI_COMMIT_REF_SLUG-yarn-$SERVICE
      paths:
        - $SERVICE/.yarn
        - $SERVICE/node-modules
      policy: pull

Documentation:
  stage: test
  image: !reference [.images, node ]
  parallel:
    matrix:
      - SERVICE:
          - contracts
          - contracts-v1
  rules:
    - !reference [.rules, on_mr ]
    - !reference [.rules, on_push_to_default_branch ]
  dependencies:
    - Build contracts
  script:
    - cd $SERVICE
    - !reference [ .scripts, yarn_install ]
    - yarn docs
  cache:
    - key: $CI_COMMIT_REF_SLUG-yarn-root
      paths:
        - node_modules
        - .yarn
      policy: pull
    - key: $CI_COMMIT_REF_SLUG-yarn-$SERVICE
      paths:
        - $SERVICE/.yarn
        - $SERVICE/node-modules
      policy: pull
  artifacts:
    name: $SERVICE_docs
    paths:
      - $SERVICE/.docs/
    expire_in: 30 days

Build images:
  stage: publish
  image: !reference [.images, kaniko ]
  rules:
    - !reference [.rules, on_mr ]
    - !reference [.rules, on_push_to_default_branch ]
  parallel:
    matrix:
      - SERVICE:
          - contracts
          - contracts-v1
          - coin-prices-server
          - client
          - subgraph
          - backend
  variables:
    IMAGE_NAME: $SERVICE
    GOOGLE_APPLICATION_CREDENTIALS: /kaniko/config.json
  script:
    - echo $KANIKO_CACHE_CONFIG > /kaniko/.docker/config.json
    - echo "$GCP_REGISTRY_PUSHER_SERVICE_ACCOUNT" | base64 -d > /kaniko/config.json
    - chmod 400 /kaniko/config.json
    - /kaniko/executor
      --context "$CI_PROJECT_DIR/$SERVICE"
      --dockerfile "$CI_PROJECT_DIR/ci/Dockerfile.$SERVICE"
      --destination "${GCP_DOCKER_IMAGE_REGISTRY}/$IMAGE_NAME:$IMAGE_TAG"
      --build-arg VERSION_TAG=$CI_COMMIT_SHORT_SHA
      --cache=true
      --cache-repo=$KANIKO_CACHE_REPO
      --insecure-pull

Cypress E2E Tests:
  stage: e2e
  image: !reference [.images, synpress ]
  rules:
    - !reference [ .rules, on_mr ]
    - !reference [.rules, on_push_to_default_branch ]
  variables:
    NETWORK_NAME: sepolia
    PRIVATE_KEY: $GOERLI_PRIVATE_KEY
    CYPRESS_DOCKER_RUN: "true"
    CI: "true"
    METAMASK_VERSION: "10.25.0"
  artifacts:
    when: on_failure
    name: cypress
    paths:
      - client/cypress/videos
      - client/cypress/screenshots
    expire_in: 3 days
  cache:
    - key: $CI_COMMIT_REF_SLUG-yarn-client
      policy: pull
      paths:
        - client/.yarn
        - client/node-modules
    - key: $CI_COMMIT_REF_SLUG-yarn-root
      policy: pull
      paths:
        - node_modules
        - .yarn
  script:
    - set -e
    # Setup NVM to use Node version 16
    - source /usr/share/nvm/init-nvm.sh
    - nvm install 16
    - npm i -g yarn
    - source $CI_PROJECT_DIR/ci/argocd/resolve_env.sh e2e
    - bash $CI_PROJECT_DIR/ci/argocd/application.sh create
    - cd client
    - yarn install --cache-folder .yarn --frozen-lockfile --prefer-offline --no-audit
    - export OCTANT_BASE_URL=https://$(bash $CI_PROJECT_DIR/ci/argocd/get_web_client_url.sh)
    - set +e
    - yarn synpress:run || CY_EXIT_CODE=$?
    - if [[ "$CY_EXIT_CODE" == "0" ]]; then rm -r $CI_PROJECT_DIR/client/cypress/videos $CI_PROJECT_DIR/client/cypress/screenshots; fi
    - set -e
    - bash $CI_PROJECT_DIR/ci/argocd/application.sh delete
    - exit $CY_EXIT_CODE

Force destroy E2E env:
  stage: e2e
  image: !reference [.images, git_improved ]
  rules:
    - !reference [.rules, on_mr_manual]
    - !reference [.rules, on_push_to_default_branch_manual]
  allow_failure: true
  script:
    - source $CI_PROJECT_DIR/ci/argocd/resolve_env.sh e2e
    - bash $CI_PROJECT_DIR/ci/argocd/application.sh destroy

.deploy:
  stage: deploy
  image: !reference [.images, git_improved ]
  script:
    - source $CI_PROJECT_DIR/ci/argocd/resolve_env.sh $ENV_TYPE
    - bash $CI_PROJECT_DIR/ci/argocd/application.sh create
  environment:
    action: start

.destroy:
  stage: cleanup
  image: !reference [.images, git_improved ]
  script:
    - source $CI_PROJECT_DIR/ci/argocd/resolve_env.sh $ENV_TYPE
    - bash $CI_PROJECT_DIR/ci/argocd/application.sh destroy
  environment:
    action: stop

Deploy MR App:
  extends:
    - .deploy
  variables:
    ENV_TYPE: "mr"
  rules:
    - !reference [.rules, on_mr_manual]
  environment:
    name: mr/$CI_MERGE_REQUEST_IID
    url: https://mr-$CI_MERGE_REQUEST_IID-client.octant.wildland.dev
    deployment_tier: development
    on_stop: Destroy MR App


Deploy UAT App:
  extends:
    - .deploy
  variables:
    ENV_TYPE: "uat"
  rules:
    - !reference [.rules, on_mr_manual]
  environment:
    name: persistent/uat
    url: https://uat-client.octant.wildland.dev
    deployment_tier: testing
    on_stop: Destroy UAT App

Deploy PROD App:
  extends:
    - .deploy
  variables:
    ENV_TYPE: "prod"
  rules:
    - !reference [.rules, on_push_to_default_branch_manual]
  environment:
    name: persistent/prod
    url: https://prod-client.octant.wildland.dev
    deployment_tier: production

Destroy MR App:
  extends:
    - .destroy
  rules:
    - !reference [.rules, on_mr_manual]
  needs: []
  environment:
    name: mr/$CI_MERGE_REQUEST_IID
    deployment_tier: development

Destroy UAT App:
  extends:
    - .destroy
  rules:
    - !reference [.rules, on_mr_manual]
  needs: []
  environment:
    name: persistent/uat
    deployment_tier: testing

pages:
  stage: deploy
  image: !reference [.images, node ]
  rules:
    - if: '$CI_COMMIT_REF_NAME == "master"'
      when: manual
  script:
    - cd contracts
    - yarn install --non-interactive --cache-folder .yarn
    - yarn compile
    - cd ../client
    - yarn install --non-interactive
    - yarn build:staging
    - cd ..
    - mv client/dist public
    - echo '/governance/octant/* /:splat 200' > public/_redirects
  artifacts:
    paths:
      - public

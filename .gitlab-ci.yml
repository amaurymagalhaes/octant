variables:
  KANIKO_VERSION: v1.9.2
  FF_USE_FASTZIP: "true"
  CACHE_COMPRESSION_LEVEL: "fast"
  TRANSFER_METER_FREQUENCY: "2s"
  MASTER_BRANCH: "master"
  IMAGE_TAG: $CI_COMMIT_SHA
  SECRET_WORDS: test test test test test test test test test test test junk

stages:
  - build
  - lint_and_typecheck
  - test
  - docker
  - deploy
  - application
  - status
  - cleanup

default:
  tags:
    - metal
  interruptible: true

.images:
  python:
    name: acidrain/python-poetry:3.11-1.5.1
    pull_policy: if-not-present
  node:
    name: registry.gitlab.com/wildland/devops/container-builder/octant/node-extended:latest
    pull_policy: if-not-present
  kaniko:
    name: gcr.io/kaniko-project/executor:$KANIKO_VERSION-debug
    pull_policy: if-not-present
    entrypoint: [""]
  git_improved:
    name: registry.gitlab.com/wildland/devops/container-builder/gitops-builder:latest
    pull_policy: if-not-present
  synpress:
    name: registry.gitlab.com/wildland/devops/container-builder/octant/synpress-arch:08da1d10
    pull_policy: if-not-present
  alpine_git:
    name: alpine/git
    pull_policy: if-not-present
    entrypoint: [""]

.rules:
  on_mr:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
  on_push_to_default_branch:
    - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  on_push_to_default_branch_manual:
    - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      when: manual
      allow_failure: true
  on_push_to_master_branch:
    - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH == $MASTER_BRANCH
  on_push_to_master_branch_manual:
    - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH == $MASTER_BRANCH
      when: manual
      allow_failure: true
  on_mr_manual:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: manual
      allow_failure: true
  on_version_tag:
    - if: '$CI_COMMIT_TAG =~ /^v\d+\.\d+\.\d+$/'

.scripts:
  yarn_install:
    - yarn install --cache-folder .yarn --non-interactive --frozen-lockfile
  poetry_install:
    - poetry config virtualenvs.in-project true
    - poetry install

Build backend:
  stage: build
  image: !reference [.images, python ]
  rules:
    - !reference [.rules, on_mr ]
    - !reference [.rules, on_push_to_default_branch ]
    - !reference [.rules, on_push_to_master_branch ]
  script:
    - ci/build_backend.sh
  cache:
    - key: $CI_COMMIT_REF_SLUG-poetry-backend
      policy: push
      paths:
        - backend/.venv

Build contracts:
  stage: build
  image: !reference [.images, node ]
  rules:
    - !reference [.rules, on_mr ]
    - !reference [.rules, on_push_to_default_branch ]
    - !reference [.rules, on_push_to_master_branch ]
  script:
    - ci/build_contracts_v1.sh
  cache:
    - key: $CI_COMMIT_REF_SLUG-yarn-root
      paths:
        - node_modules
        - .yarn
    - key: $CI_COMMIT_REF_SLUG-yarn-contracts
      paths:
        - contracts-v1/.yarn
        - contracts-v1/node_modules
  artifacts:
    name: contracts
    paths:
      - contracts-v1/artifacts
      - contracts-v1/typechain
    expire_in: 3 days

Build services:
  stage: build
  image: !reference [.images, node ]
  parallel:
    matrix:
      - SERVICE:
          - client
          - coin-prices-server
          - subgraph
  rules:
    - !reference [.rules, on_mr ]
    - !reference [.rules, on_push_to_default_branch ]
    - !reference [.rules, on_push_to_master_branch ]
  dependencies:
    - Build contracts
  needs:
    - Build contracts
  script:
    - ci/build_$SERVICE.sh
  cache:
    - key: $CI_COMMIT_REF_SLUG-yarn-root
      paths:
        - node_modules
        - .yarn
      policy: pull
    - key: $CI_COMMIT_REF_SLUG-yarn-$SERVICE
      paths:
        - $SERVICE/.yarn
        - $SERVICE/node-modules

Lint and typecheck yarn:
  stage: lint_and_typecheck
  image: !reference [.images, node ]
  parallel:
    matrix:
      - SERVICE:
          - contracts-v1
          - client
          - coin-prices-server
          - subgraph
  rules:
    - !reference [.rules, on_mr ]
    - !reference [.rules, on_push_to_default_branch ]
    - !reference [.rules, on_push_to_master_branch ]
  script:
    - cd $SERVICE
    - !reference [ .scripts, yarn_install ]
    - yarn eslint
    - yarn type-check
  cache:
    - key: $CI_COMMIT_REF_SLUG-yarn-root
      paths:
        - node_modules
        - .yarn
      policy: pull
    - key: $CI_COMMIT_REF_SLUG-yarn-$SERVICE
      paths:
        - $SERVICE/.yarn
        - $SERVICE/node-modules
      policy: pull

Lint and typecheck poetry:
  stage: lint_and_typecheck
  image: !reference [.images, python ]
  rules:
    - !reference [.rules, on_mr ]
    - !reference [.rules, on_push_to_default_branch ]
    - !reference [.rules, on_push_to_master_branch ]
  script:
    - cd backend
    - !reference [ .scripts, poetry_install ]
    - poetry run black --check --extend-exclude .venv .
    - poetry run flake8
  cache:
    - key: $CI_COMMIT_REF_SLUG-poetry-backend-lint
      paths:
        - backend/.venv
      policy: pull

Backend tests:
  stage: test
  image: !reference [.images, python ]
  rules:
    - !reference [.rules, on_mr ]
    - !reference [.rules, on_push_to_default_branch ]
    - !reference [.rules, on_push_to_master_branch ]
  dependencies:
    - Build backend
  script:
    - cd backend
    - !reference [ .scripts, poetry_install ]
    - poetry run pytest
  cache:
    - key: $CI_COMMIT_REF_SLUG-poetry-backend
      policy: pull
      paths:
        - backend/.venv

Unit tests:
  stage: test
  image: !reference [.images, node ]
  parallel:
    matrix:
      - SERVICE:
          - contracts-v1
          - client
          - coin-prices-server
          - subgraph
  rules:
    - !reference [.rules, on_mr ]
    - !reference [.rules, on_push_to_default_branch ]
    - !reference [.rules, on_push_to_master_branch ]
  script:
    - cd $SERVICE
    - !reference [ .scripts, yarn_install ]
    - yarn test
  cache:
    - key: $CI_COMMIT_REF_SLUG-yarn-root
      paths:
        - node_modules
        - .yarn
      policy: pull
    - key: $CI_COMMIT_REF_SLUG-yarn-$SERVICE
      paths:
        - $SERVICE/.yarn
        - $SERVICE/node-modules
      policy: pull

Documentation:
  stage: test
  image: !reference [.images, node ]
  parallel:
    matrix:
      - SERVICE:
         - contracts-v1
  rules:
    - !reference [.rules, on_mr ]
    - !reference [.rules, on_push_to_default_branch ]
    - !reference [.rules, on_push_to_master_branch ]
  script:
    - cd $SERVICE
    - !reference [ .scripts, yarn_install ]
    - yarn docs
  cache:
    - key: $CI_COMMIT_REF_SLUG-yarn-root
      paths:
        - node_modules
        - .yarn
      policy: pull
    - key: $CI_COMMIT_REF_SLUG-yarn-$SERVICE
      paths:
        - $SERVICE/.yarn
        - $SERVICE/node-modules
      policy: pull
  artifacts:
    name: $SERVICE_docs
    paths:
      - $SERVICE/.docs/
    expire_in: 3 days

Build images:
  stage: docker
  image: !reference [ .images, kaniko ]
  rules:
    - !reference [ .rules, on_mr ]
    - !reference [ .rules, on_push_to_default_branch ]
    - !reference [ .rules, on_push_to_master_branch ]
    - !reference [ .rules, on_version_tag ]
  parallel:
    matrix:
      - SERVICE:
          - contracts-v1
          - coin-prices-server
          - client
          - subgraph
          - backend
  variables:
    IMAGE_NAME: $SERVICE
    GOOGLE_APPLICATION_CREDENTIALS: /kaniko/config.json
  script:
    - echo $KANIKO_CACHE_CONFIG > /kaniko/.docker/config.json
    - echo "$GCP_REGISTRY_PUSHER_SERVICE_ACCOUNT" | base64 -d > /kaniko/config.json
    - chmod 400 /kaniko/config.json
    - /kaniko/executor
      --context "$CI_PROJECT_DIR/$SERVICE"
      --dockerfile "$CI_PROJECT_DIR/ci/Dockerfile.$SERVICE"
      --destination "${GCP_DOCKER_IMAGE_REGISTRY}/$IMAGE_NAME:$IMAGE_TAG"
      --build-arg VERSION_TAG=$CI_COMMIT_SHORT_SHA
      --cache=true
      --cache-repo=$KANIKO_CACHE_REPO
      --insecure-pull

.env_resolve: &env_resolve_init
  before_script:
    - set -ex
    - source $CI_PROJECT_DIR/ci/argocd/resolve_env.sh $ENV_TYPE

.deploy_anvil:
  stage: deploy
  image: !reference [.images, git_improved ]
  <<: *env_resolve_init
  resource_group: gitops
  script:
    - set -ex
    - bash $CI_PROJECT_DIR/ci/argocd/application.sh create
  environment:
    action: start

.deploy_app:
  stage: application
  image: !reference [.images, git_improved ]
  <<: *env_resolve_init
  resource_group: gitops
  script:
    - set -ex
    - bash $CI_PROJECT_DIR/ci/argocd/application.sh update

.deploy_anvil_contracts:
  stage: application
  image:
    name: ${GCP_DOCKER_IMAGE_REGISTRY}/contracts-v1:${IMAGE_TAG}
    entrypoint: [""]
  <<: *env_resolve_init
  artifacts:
    reports:
      dotenv: build.env
  variables:
    NETWORK: 'localhost'
    SKIP_LOCAL_SUBGRAPH_UPDATE: 'true'
    PROPOSALS_ADDRESSES: '0x13aB14d9f8a40a0a19f7c8Ba8B23a3F12D25fD12,0x50b641Fb1CC42bE8a292263c68f0612b8182dA51,0x519a0307b7364D21aB1227bf37689271233B3F93,0x5a873cB89BAd323b1acfd998C36aAc6b1a90a91d,0x608309bF063599DdaaF79409879917032377AC44,0x6d614D51D1Ed4eE97A37614F431771Fdb92D5Ae7,0x839a14166Af647F9DD5CdeA616c0354286Cc1593,0xBfD2704FEbD0d6A3f82Ed338731Fdf63077F76Fa,0xdE49c0928ECC3cfb5d07F69f5C82949168Fc6805,0xeAe7825257E71ba345FFcC54D0581ccE819738B9'
    PROPOSALS_CID: QmXq3Eaz5xQF51J7mWzxDmfrVjDuGdhnirthttJ9Q2WTF8
    DECISION_WINDOW: 9000 # 2.5h
    EPOCH_DURATION: 10800 # 3.0h
  script:
    - set -ex
    - bash $CI_PROJECT_DIR/ci/argocd/wait_for_app.sh
    - export EPOCHS_START=$(date +%s)
    - export LOCAL_RPC_URL=https://$(bash $CI_PROJECT_DIR/ci/argocd/get_rpc_url.sh)
    - /app/entrypoint.sh $NETWORK $CI_PROJECT_DIR/build.env

Run E2E App:
  extends:
    - .deploy_anvil
  rules:
    - !reference [.rules, on_mr ]
    - !reference [.rules, on_push_to_default_branch ]
    - !reference [.rules, on_push_to_master_branch ]
  variables:
    ENV_TYPE: "e2e"
  environment:
    name: e2e/$CI_PIPELINE_IID
    url: https://mr-$CI_MERGE_REQUEST_IID-e2e-$CI_PIPELINE_ID-client.octant.wildland.dev
    deployment_tier: development
    on_stop: Destroy E2E App
    auto_stop_in: 6 hours

Run MR App:
  extends:
    - .deploy_anvil
  rules:
    - !reference [.rules, on_mr_manual ]
  variables:
    ENV_TYPE: "mr"
  environment:
    name: mr/$CI_MERGE_REQUEST_IID
    url: https://mr-$CI_MERGE_REQUEST_IID-client.octant.wildland.dev
    deployment_tier: development
    on_stop: Destroy MR App

E2E contracts:
  extends:
    - .deploy_anvil_contracts
  needs: ["Run E2E App"]
  rules:
    - !reference [.rules, on_mr ]
    - !reference [.rules, on_push_to_default_branch ]
    - !reference [.rules, on_push_to_master_branch ]
  variables:
    ENV_TYPE: "e2e"

MR contracts:
  extends:
    - .deploy_anvil_contracts
  needs: ["Run MR App"]
  rules:
    - !reference [.rules, on_mr ]
  variables:
    ENV_TYPE: "mr"

E2E app deploy:
  extends:
    - .deploy_app
  needs: ["E2E contracts"]
  dependencies: ["E2E contracts"]
  rules:
    - !reference [.rules, on_mr ]
    - !reference [.rules, on_push_to_default_branch ]
    - !reference [.rules, on_push_to_master_branch ]
  variables:
    ENV_TYPE: "e2e"
    NETWORK_NAME: "local"
    NETWORK_ID: "1337"
    SNAPSHOTTER_ENABLED: "true"
    SCHEDULER_ENABLED: "false"

MR app deploy:
  extends:
    - .deploy_app
  needs: ["MR contracts"]
  dependencies: ["MR contracts"]
  rules:
    - !reference [.rules, on_mr ]
  variables:
    ENV_TYPE: "mr"
    NETWORK_NAME: "local"
    NETWORK_ID: "1337"
    SNAPSHOTTER_ENABLED: "true"
    SCHEDULER_ENABLED: "false"

Run UAT App:
  stage: deploy
  extends:
    - .deploy_app
  rules:
    - !reference [.rules, on_mr_manual ]
    - !reference [.rules, on_push_to_default_branch_manual ]
    - !reference [.rules, on_push_to_master_branch_manual ]
  variables:
    ENV_TYPE: "uat"
    NETWORK_NAME: "sepolia"
    NETWORK_ID: "11155111"
    SNAPSHOTTER_ENABLED: "true"
    SCHEDULER_ENABLED: "true"
    GLM_CLAIM_ENABLED: "true"
    VAULT_CONFIRM_WITHDRAWALS_ENABLED: "true"

Run Master App:
  stage: deploy
  extends:
    - .deploy_app
  rules:
    - !reference [.rules, on_mr_manual ]
    - !reference [.rules, on_push_to_default_branch_manual ]
    - !reference [.rules, on_push_to_master_branch_manual ]
  variables:
    ENV_TYPE: "master"
    NETWORK_NAME: "sepolia"
    NETWORK_ID: "11155111"
    SNAPSHOTTER_ENABLED: "true"
    SCHEDULER_ENABLED: "true"
    GLM_CLAIM_ENABLED: "true"
    VAULT_CONFIRM_WITHDRAWALS_ENABLED: "true"

Wait for MR:
  stage: status
  needs: ["MR app deploy"]
  image: !reference [.images, git_improved ]
  <<: *env_resolve_init
  rules:
    - !reference [.rules, on_mr ]
  script:
    - set -ex
    - bash $CI_PROJECT_DIR/ci/argocd/wait_for_app.sh
  variables:
    ENV_TYPE: "mr"

Wait for UAT:
  stage: status
  needs: ["Run UAT App"]
  image: !reference [.images, git_improved ]
  <<: *env_resolve_init
  rules:
    - !reference [.rules, on_mr ]
    - !reference [.rules, on_push_to_default_branch ]
    - !reference [.rules, on_push_to_master_branch ]
  script:
    - set -ex
    - bash $CI_PROJECT_DIR/ci/argocd/wait_for_app.sh
  variables:
    ENV_TYPE: "uat"

Wait for Master:
  stage: status
  needs: ["Run Master App"]
  image: !reference [.images, git_improved ]
  <<: *env_resolve_init
  rules:
    - !reference [.rules, on_mr]
    - !reference [.rules, on_push_to_default_branch ]
    - !reference [.rules, on_push_to_master_branch ]
  script:
    - set -ex
    - bash $CI_PROJECT_DIR/ci/argocd/wait_for_app.sh
  variables:
    ENV_TYPE: "master"

.destroy_app:
  stage: cleanup
  image: !reference [.images, git_improved ]
  resource_group: gitops
  <<: *env_resolve_init
  script:
    - set -ex
    - bash $CI_PROJECT_DIR/ci/argocd/application.sh destroy
  environment:
    action: stop

Destroy E2E App:
  extends:
    - .destroy_app
  needs: ["Run E2E App"]
  variables:
    ENV_TYPE: "e2e"
  rules:
    - !reference [.rules, on_mr_manual ]
    - !reference [.rules, on_push_to_default_branch_manual ]
    - !reference [.rules, on_push_to_master_branch_manual ]
  needs: []
  environment:
    name: e2e/$CI_PIPELINE_IID
    deployment_tier: development

Destroy MR App:
  extends:
    - .destroy_app
  needs: ["Run MR App"]
  variables:
    ENV_TYPE: "mr"
  rules:
    - !reference [.rules, on_mr_manual ]
  needs: []
  environment:
    name: mr/$CI_MERGE_REQUEST_IID
    deployment_tier: development

Destroy UAT App:
  extends:
    - .destroy_app
  variables:
    ENV_TYPE: "uat"
  rules:
    - !reference [.rules, on_mr_manual ]
    - !reference [.rules, on_push_to_default_branch_manual ]
    - !reference [.rules, on_push_to_master_branch_manual ]
  needs: []
  environment:
    name: persistent/uat
    deployment_tier: testing

Destroy Master App:
  extends:
    - .destroy_app
  variables:
    ENV_TYPE: "master"
  rules:
    - !reference [.rules, on_mr_manual ]
    - !reference [.rules, on_push_to_default_branch_manual ]
    - !reference [.rules, on_push_to_master_branch_manual ]
  needs: []
  environment:
    name: persistent/master
    deployment_tier: testing

E2E Epoch 1:
  stage: application
  needs: ["E2E app deploy"]
  image: !reference [.images, synpress ]
  <<: *env_resolve_init
  rules:
    - !reference [.rules, on_mr]
    - !reference [.rules, on_push_to_default_branch ]
    - !reference [.rules, on_push_to_master_branch ]
  artifacts:
    when: on_failure
    name: cypress
    paths:
      - client/cypress/videos
      - client/cypress/screenshots
    expire_in: 3 days
  cache:
    - key: $CI_COMMIT_REF_SLUG-yarn-client
      policy: pull
      paths:
        - client/.yarn
        - client/node-modules
    - key: $CI_COMMIT_REF_SLUG-yarn-root
      policy: pull
      paths:
        - node_modules
        - .yarn
  script:
    - set -e
    # Setup NVM to use Node version 16
    - source /usr/share/nvm/init-nvm.sh
    - nvm use 16
    - npm i -g yarn
    - cd client
    - yarn install --cache-folder .yarn --frozen-lockfile --prefer-offline --no-audit
    # Wait for the E2E app to become ready
    - bash $CI_PROJECT_DIR/ci/argocd/wait_for_app.sh
    - export OCTANT_BASE_URL=https://$(bash $CI_PROJECT_DIR/ci/argocd/get_web_client_url.sh)
    - set +e
    - yarn synpress:run || CY_EXIT_CODE=$?
    - if [[ "$CY_EXIT_CODE" == "0" ]]; then rm -r $CI_PROJECT_DIR/client/cypress/videos $CI_PROJECT_DIR/client/cypress/screenshots; fi
    - set -e
    # Trigger the stop job
    - |
      JOB_ID=$(curl --fail -s -XGET --header "PRIVATE-TOKEN: $CI_JOB_CONTROLLER" https://gitlab.com/api/v4/projects/$CI_PROJECT_ID/pipelines/$CI_PIPELINE_ID/jobs | jq '.[] | select(.name == "Destroy E2E App") | .id')

      curl -s --fail -X POST \
           -H "PRIVATE-TOKEN: $CI_JOB_CONTROLLER" \
           "$CI_API_V4_URL/projects/$CI_PROJECT_ID/jobs/$JOB_ID/play"
    - exit $CY_EXIT_CODE
  variables:
    ENV_TYPE: "e2e"
    CYPRESS_DOCKER_RUN: "true"
    CI: "true"
    METAMASK_VERSION: "10.25.0"

Deploy Release Candidate app:
  stage: deploy
  image: !reference [.images, alpine_git]
  rules:
    - !reference [.rules, on_push_to_master_branch_manual]
  resource_group: production
  variables:
    ARGO_REPOSITORY: "https://wildland-bot:${HOUSEKEEPER_CI_TOKEN}@gitlab.com/wildland/devops/iac/k8s/wildland-k8s-devops.git"
    ARGO_REPOSITORY_BRANCH: "gitlab/octant-testing"
  script: |
    set -ex
    apk add gpg-agent yq
    gpg --import <(echo $HOUSEKEEPER_GPG_KEY | base64 -d)
    git config --global user.name "Wildland Housekeeper"
    git config --global user.email "$HOUSEKEEPER_EMAIL"
    git config --global user.signingkey $HOUSEKEEPER_GPG_KEY_ID

    GIT_DIR=`mktemp -d`
    git clone -b $ARGO_REPOSITORY_BRANCH $ARGO_REPOSITORY $GIT_DIR

    cd $GIT_DIR

    cat mainnet/octant-image.values.yaml | yq -r ".[0].value.value = \"$IMAGE_TAG\"" | tee mainnet/octant-image.values.yaml
    cat testnet/octant-image.values.yaml | yq -r ".[0].value.value = \"$IMAGE_TAG\"" | tee testnet/octant-image.values.yaml

    git add mainnet/octant-image.values.yaml
    git add testnet/octant-image.values.yaml
    git commit -S -m "Changed octant image tag to $IMAGE_TAG at $(date +%Y-%m-%d)" || true

    git push
  environment:
    name: persistent/prod
    url: https://client.testnet.octant.wildland.dev

Deploy production app:
  stage: deploy
  rules:
    - !reference [.rules, on_version_tag]
  variables:
    DEV_IMAGE_TAG: $CI_COMMIT_SHA
    PROD_IMAGE_TAG: $CI_COMMIT_TAG
  trigger:
    project: wildland/devops/pipelines/octant-production
    branch: master

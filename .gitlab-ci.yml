variables:
  KANIKO_VERSION: v1.9.2
  FF_USE_FASTZIP: "true"
  CACHE_COMPRESSION_LEVEL: "fast"
  TRANSFER_METER_FREQUENCY: "2s"

stages:
  - build
  - lint_and_typecheck
  - test
  - publish
  - deploy
  - ci-validate
  - ci-plan
  - environments

image: node:16-bullseye-slim

.rules:
  on_mr:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
  on_push_to_default_branch:
    - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

.scripts:
  install_packages:
    - apt update && apt install -y --no-install-recommends git ca-certificates
  install_libpq5:
    - apt update && apt install -y --no-install-recommends libpq5
  yarn_install:
    - yarn install --cache-folder .yarn --non-interactive --frozen-lockfile

Build contracts:
  stage: build
  rules:
    - !reference [.rules, on_mr ]
    - !reference [.rules, on_push_to_default_branch ]
  script:
    - !reference [.scripts, install_packages]
    - ci/build_root.sh
    - ci/build_contracts.sh
  cache:
    - key: $CI_COMMIT_REF_SLUG-yarn-root
      paths:
        - node_modules
        - .yarn
    - key: $CI_COMMIT_REF_SLUG-yarn-contracts
      paths:
        - contracts/.yarn
        - contracts/node_modules
  artifacts:
    name: contracts
    paths:
      - contracts/artifacts
      - contracts/typechain
    expire_in: 30 days

Build services:
  stage: build
  parallel:
    matrix:
      - SERVICE:
          - client
          - coin-prices-server
          - subgraph
  rules:
    - !reference [.rules, on_mr ]
    - !reference [.rules, on_push_to_default_branch ]
  dependencies:
    - Build contracts
  needs:
    - Build contracts
  script:
    - !reference [.scripts, install_packages]
    - ci/build_$SERVICE.sh
  cache:
    - key: $CI_COMMIT_REF_SLUG-yarn-root
      paths:
        - node_modules
        - .yarn
      policy: pull
    - key: $CI_COMMIT_REF_SLUG-yarn-$SERVICE
      paths:
        - $SERVICE/.yarn
        - $SERVICE/node-modules

Lint and typecheck:
  stage: lint_and_typecheck
  parallel:
    matrix:
      - SERVICE:
          - contracts
          - client
          - coin-prices-server
          - subgraph
  rules:
    - !reference [.rules, on_mr ]
    - !reference [.rules, on_push_to_default_branch ]
  script:
    - cd $SERVICE
    - !reference [ .scripts, yarn_install ]
    - yarn eslint
    - yarn type-check
  cache:
    - key: $CI_COMMIT_REF_SLUG-yarn-root
      paths:
        - node_modules
        - .yarn
      policy: pull
    - key: $CI_COMMIT_REF_SLUG-yarn-$SERVICE
      paths:
        - $SERVICE/.yarn
        - $SERVICE/node-modules
      policy: pull

Unit tests:
  stage: test
  parallel:
    matrix:
      - SERVICE:
          - contracts
          - client
          - coin-prices-server
          - subgraph
  rules:
    - !reference [.rules, on_mr ]
    - !reference [.rules, on_push_to_default_branch ]
  dependencies:
    - Build contracts
  script:
    - cd $SERVICE
    - !reference [ .scripts, install_libpq5 ]
    - !reference [ .scripts, yarn_install ]
    - yarn test
  cache:
    - key: $CI_COMMIT_REF_SLUG-yarn-root
      paths:
        - node_modules
        - .yarn
      policy: pull
    - key: $CI_COMMIT_REF_SLUG-yarn-$SERVICE
      paths:
        - $SERVICE/.yarn
        - $SERVICE/node-modules
      policy: pull

Documentation:
  stage: test
  parallel:
    matrix:
      - SERVICE:
          - contracts
  rules:
    - !reference [.rules, on_mr ]
    - !reference [.rules, on_push_to_default_branch ]
  dependencies:
    - Build contracts
  script:
    - cd $SERVICE
    - !reference [ .scripts, yarn_install ]
    - yarn docs
  cache:
    - key: $CI_COMMIT_REF_SLUG-yarn-root
      paths:
        - node_modules
        - .yarn
      policy: pull
    - key: $CI_COMMIT_REF_SLUG-yarn-$SERVICE
      paths:
        - $SERVICE/.yarn
        - $SERVICE/node-modules
      policy: pull
  artifacts:
    name: $SERVICE_docs
    paths:
      - $SERVICE/.docs/
    expire_in: 30 days

Build container:
  stage: publish
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: manual
      allow_failure: true
      variables:
        IMAGE_NAME: dev/$SERVICE
    - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  parallel:
    matrix:
      - SERVICE:
          - contracts
          - coin-prices-server
          - client
          - subgraph
  image:
    name: gcr.io/kaniko-project/executor:$KANIKO_VERSION-debug
    entrypoint: [""]
  variables:
    IMAGE_NAME: $SERVICE
  script:
    - echo $KANIKO_CACHE_CONFIG > /kaniko/.docker/config.json
    - /kaniko/executor
      --context "$CI_PROJECT_DIR/$SERVICE"
      --dockerfile "$CI_PROJECT_DIR/ci/Dockerfile.$SERVICE"
      --destination "${CI_REGISTRY_IMAGE}/$IMAGE_NAME:$CI_COMMIT_SHORT_SHA"
      --build-arg CI_COMMIT_SHORT_SHA=$CI_COMMIT_SHORT_SHA
      --cache=true
      --cache-repo=$KANIKO_CACHE_REPO

# TODO left until migration to from gitlab pages will be finished
pages:
  stage: environments
  rules:
    - if: '$CI_COMMIT_REF_NAME == "master"'
      when: manual
  script:
    - apt-get update && apt-get install -y --no-install-recommends git --reinstall ca-certificates
    - cd contracts
    - yarn install --non-interactive --cache-folder .yarn
    - yarn compile
    - cd ../client
    - yarn install --non-interactive
    - yarn build
    - cd ..
    - mv client/dist public
  artifacts:
    paths:
      - public

include:
  - template: Terraform/Base.latest.gitlab-ci.yml  # https://gitlab.com/gitlab-org/gitlab/blob/master/lib/gitlab/ci/templates/Terraform/Base.latest.gitlab-ci.yml

.terraform:config:
  image:
    name: "$CI_TEMPLATE_REGISTRY_HOST/gitlab-org/terraform-images/stable:latest"
  before_script:
    - echo "$GCP_TERRAFORM_ACCT" | base64 -d > "$CI_PROJECT_DIR/.gcloud_credentials.json"
    - chmod 400 "$CI_PROJECT_DIR/.gcloud_credentials.json"
  after_script:
    - rm "$CI_PROJECT_DIR/.gcloud_credentials.json"
  variables:
    TF_ROOT: ${CI_PROJECT_DIR}/ci/terraform
    TF_STATE_NAME: $CI_ENVIRONMENT_SLUG
    TF_INIT_FLAGS: -lockfile=readonly
    GOOGLE_APPLICATION_CREDENTIALS: $CI_PROJECT_DIR/.gcloud_credentials.json
    DNS_DOMAIN: gle.octant.world
    TF_VAR_CI_COMMIT_REF_NAME: $CI_COMMIT_REF_NAME
    TF_VAR_CI_ENVIRONMENT_NAME: $CI_ENVIRONMENT_NAME
    TF_VAR_dns_endpoint: $CI_ENVIRONMENT_SLUG
    TF_VAR_generate_contracts: "false"
    TF_VAR_octant_tag: $CI_COMMIT_SHORT_SHA

fmt:
  stage: ci-validate
  extends:
    - .terraform:fmt
    - .terraform:config
  needs: [ ]
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

validate:
  stage: ci-validate
  extends:
    - .terraform:validate
    - .terraform:config
  needs: [ ]
  variables:
    TF_STATE_NAME: validate
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

# Manually join 2 stages from gitlab template
.deploy:
  stage: environments
  extends:
    - .terraform:config
  needs:
    - fmt
    - validate
    - Build container
  script:
    - cd "${TF_ROOT}"
    - gitlab-terraform plan -replace="google_compute_instance.vm"
    - gitlab-terraform plan-json -replace="google_compute_instance.vm"
    - gitlab-terraform apply
  resource_group: ${TF_STATE_NAME}
  artifacts:
    public: false
    reports:
      terraform: ${TF_ROOT}/plan.json
  environment:
    url: http://$CI_ENVIRONMENT_SLUG.$DNS_DOMAIN
    action: start

.destroy:
  stage: environments
  extends:
    - .terraform:destroy
    - .terraform:config
  needs:
    - fmt
    - validate
  after_script:
    - !reference [ .terraform:config, after_script ]
    - "curl -H \"Private-Token: ${TF_VAR_gitlab_token}\" -X DELETE \"${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/terraform/state/${TF_STATE_NAME}\""
  environment:
    action: stop

Deploy to MR environment:
  extends:
    - .deploy
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: manual
      allow_failure: true
      variables:
        TF_VAR_octant_branch: dev
  environment:
    name: mr/$CI_MERGE_REQUEST_IID
    deployment_tier: development
    on_stop: Stop MR environment

Stop MR environment:
  extends:
    - .destroy
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: manual
      allow_failure: true
      variables:
        TF_VAR_octant_branch: dev
  environment:
    name: mr/$CI_MERGE_REQUEST_IID
    deployment_tier: development

Deploy to TEST environment:
  extends:
    - .deploy
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: manual
      allow_failure: true
      variables:
        TF_VAR_octant_branch: dev
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      when: manual
  environment:
    name: test
    deployment_tier: testing

Stop TEST environment:
  extends:
    - .destroy
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: manual
      allow_failure: true
      variables:
        TF_VAR_octant_branch: dev
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      when: manual
      allow_failure: true
  environment:
    name: test
    deployment_tier: testing

Deploy to UAT environment:
  extends:
    - .deploy
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      when: manual
      allow_failure: true
  environment:
    name: uat
    deployment_tier: staging

Stop UAT environment:
  extends:
    - .destroy
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      when: manual
      allow_failure: true
  environment:
    name: uat
    deployment_tier: staging

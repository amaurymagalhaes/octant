// SPDX-License-Identifier: GPL-3.0

pragma solidity ^0.8.9;

import "../interfaces/IOctantOracle.sol";
import "../withdrawals/WithdrawalsTargetV3.sol";
import "../Epochs.sol";
import {OracleErrors} from "../Errors.sol";

/// @title Protocol ETH income sampler
///
/// @notice This contract samples WithdrawalsTarget balance once in an epoch,
/// tracking Octant ETH income. WithdrawalsTarget profits include both funds
/// SKIMMED from validator balances on beacon chain (attestations etc)
/// and tx inclusion fees on execution layer (tips for block proposer and eventual MEVs).
contract OctantOracle is IOctantOracle {
    WithdrawalsTargetV3 public target;
    address public payoutsManager;
    IEpochs public immutable epochs;
    mapping(uint256 => uint256) public balanceByEpoch;
    constructor(
        address _epochsAddress
    ) {
        epochs = Epochs(_epochsAddress);
    }

    /// @notice Checks how much yield (ETH staking proceeds) is generated by Golem Foundation at particular epoch.
    /// @param epoch - Octant Epoch's number.
    /// @return Total ETH staking proceeds made by foundation in wei for particular epoch.
    function getTotalETHStakingProceeds(
        uint32 epoch
    ) public view returns (uint256) {
        return balanceByEpoch[epoch];
    }

    function setTarget(address _target) public {
        require(address(target) == address(0x0));
        target = WithdrawalsTargetV3(_target);
    }

    function setPayoutsManager(address _manager) public {
        require(address(payoutsManager) == address(0x0));
        payoutsManager = _manager;
    }

    function writeBalance() external {
        uint32 epoch = epochs.getCurrentEpoch();
        require(epoch > 1, OracleErrors.BALANCE_CANT_BE_KNOWN);
        require(balanceByEpoch[epoch-1] == 0, OracleErrors.BALANCE_ALREADY_SET);
        require(address(target) != address(0x0), OracleErrors.NO_TARGET);
        require(address(payoutsManager) != address(0x0), OracleErrors.NO_PAYOUTS_MANAGER);
        balanceByEpoch[epoch-1] = address(target).balance;
        target.withdrawRewards(payable(payoutsManager));
    }
}

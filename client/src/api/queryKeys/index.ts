import { Root, QueryKeys } from './types';

export const ROOTS: Root = {
  cryptoValues: 'cryptoValues',
  depositAt: 'depositAt',
  epochesEndTime: 'epochesEndTime',
  matchedProposalRewards: 'matchedProposalRewards',
  proposalDonors: 'proposalDonors',
  proposalsContract: 'proposalsContract',
  proposalsIpfsResults: 'proposalsIpfsResults',
  userAllocationNonce: 'userAllocationNonce',
  userAllocations: 'userAllocations',
  userHistoricAllocations: 'userHistoricAllocations',
  userTOS: 'userTOS',
};

export const QUERY_KEYS: QueryKeys = {
  blockNumber: ['blockNumber'],
  calculateRewards: (amount, days) => ['calculateRewards', amount, days.toString()],
  cryptoValues: fiatCurrency => [ROOTS.cryptoValues, fiatCurrency],
  currentEpoch: ['currentEpoch'],
  currentEpochEnd: ['currentEpochEnd'],
  currentEpochProps: ['currentEpochProps'],
  depositAtGivenEpoch: epochNumber => [ROOTS.depositAt, epochNumber.toString()],
  depositsValue: ['depositsValue'],
  epochesEndTime: epochNumber => [ROOTS.epochesEndTime, epochNumber.toString()],
  glmClaimCheck: ['glmClaimCheck'],
  history: ['history'],
  individualProposalRewards: ['individualProposalRewards'],
  individualReward: ['individualReward'],
  isDecisionWindowOpen: ['isDecisionWindowOpen'],
  largestLockedAmount: ['largestLockedAmount'],
  lockedSummaryLatest: ['lockedSummaryLatest'],
  matchedProposalRewards: epochNumber => [ROOTS.matchedProposalRewards, epochNumber.toString()],
  proposalDonors: proposalAddress => [ROOTS.proposalDonors, proposalAddress],
  proposalRewardsThreshold: ['proposalRewardsThreshold'],
  proposalsAllIpfs: ['proposalsAllIpfs'],
  proposalsCid: ['proposalsCid'],
  proposalsContract: epochNumber => [ROOTS.proposalsContract, epochNumber.toString()],
  proposalsIpfsResults: proposalAddress => [ROOTS.proposalsIpfsResults, proposalAddress],
  syncStatus: ['syncStatus'],
  totalAddresses: ['totalAddresses'],
  unlocks: ['unlocks'],
  userAllocationNonce: userAddress => ['userAllocationNonce', userAddress],
  userAllocations: epochNumber => [ROOTS.userAllocations, epochNumber.toString()],
  userHistoricAllocations: userAddress => [ROOTS.userHistoricAllocations, userAddress],
  userTOS: userAddress => [ROOTS.userTOS, userAddress],
  withdrawableUserEth: ['withdrawableUserEth'],
};

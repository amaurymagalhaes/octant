/* eslint-disable */
// @ts-nocheck
// This file was autogenerated by ethereum-abi-types-generator
import BN from 'bn.js';
import BigNumber from 'bignumber.js';
import {
  PromiEvent,
  TransactionReceipt,
  EventResponse,
  EventData,
  Web3ContractContext,
} from 'ethereum-abi-types-generator';

export interface CallOptions {
  from?: string;
  gasPrice?: string;
  gas?: number;
}

export interface SendOptions {
  from: string;
  value?: number | string | BN | BigNumber;
  gasPrice?: string;
  gas?: number;
}

export interface EstimateGasOptions {
  from?: string;
  value?: number | string | BN | BigNumber;
  gas?: number;
}

export interface MethodPayableReturnContext {
  send(options: SendOptions): PromiEvent<TransactionReceipt>;
  send(
    options: SendOptions,
    callback: (error: Error, result: any) => void,
  ): PromiEvent<TransactionReceipt>;
  estimateGas(options: EstimateGasOptions): Promise<number>;
  estimateGas(
    options: EstimateGasOptions,
    callback: (error: Error, result: any) => void,
  ): Promise<number>;
  encodeABI(): string;
}

export interface MethodConstantReturnContext<TCallReturn> {
  call(): Promise<TCallReturn>;
  call(options: CallOptions): Promise<TCallReturn>;
  call(
    options: CallOptions,
    callback: (error: Error, result: TCallReturn) => void,
  ): Promise<TCallReturn>;
  encodeABI(): string;
}

export interface MethodReturnContext extends MethodPayableReturnContext {}

export type ContractContext = Web3ContractContext<
  Epochs,
  EpochsMethodNames,
  EpochsEventsContext,
  EpochsEvents
>;
export type EpochsEvents = undefined;
export interface EpochsEventsContext {}
export type EpochsMethodNames =
  | 'new'
  | 'auth'
  | 'epochProps'
  | 'epochPropsIndex'
  | 'getCurrentEpoch'
  | 'getCurrentEpochEnd'
  | 'getCurrentEpochProps'
  | 'getDecisionWindow'
  | 'getEpochDuration'
  | 'getFinalizedEpoch'
  | 'getPendingEpoch'
  | 'isDecisionWindowOpen'
  | 'isStarted'
  | 'setEpochProps'
  | 'start';
export interface EpochPropsResponse {
  from: string;
  to: string;
  fromTs: string;
  duration: string;
  decisionWindow: string;
}
export interface EpochpropsResponse {
  from: BigInt;
  to: BigInt;
  fromTs: BigInt;
  duration: BigInt;
  decisionWindow: BigInt;
}
export interface Epochs {
  /**
   * Payable: false
   * Constant: false
   * StateMutability: nonpayable
   * Type: constructor
   * @param _start Type: uint256, Indexed: false
   * @param _epochDuration Type: uint256, Indexed: false
   * @param _decisionWindow Type: uint256, Indexed: false
   * @param _auth Type: address, Indexed: false
   */
  'new'(
    _start: string,
    _epochDuration: string,
    _decisionWindow: string,
    _auth: string,
  ): MethodReturnContext;
  /**
   * Payable: false
   * Constant: true
   * StateMutability: view
   * Type: function
   */
  auth(): MethodConstantReturnContext<string>;
  /**
   * Payable: false
   * Constant: true
   * StateMutability: view
   * Type: function
   * @param parameter0 Type: uint256, Indexed: false
   */
  epochProps(parameter0: string): MethodConstantReturnContext<EpochPropsResponse>;
  /**
   * Payable: false
   * Constant: true
   * StateMutability: view
   * Type: function
   */
  epochPropsIndex(): MethodConstantReturnContext<string>;
  /**
   * Payable: false
   * Constant: true
   * StateMutability: view
   * Type: function
   */
  getCurrentEpoch(): MethodConstantReturnContext<string>;
  /**
   * Payable: false
   * Constant: true
   * StateMutability: view
   * Type: function
   */
  getCurrentEpochEnd(): MethodConstantReturnContext<BigInt>;
  /**
   * Payable: false
   * Constant: true
   * StateMutability: view
   * Type: function
   */
  getCurrentEpochProps(): MethodConstantReturnContext<EpochpropsResponse>;
  /**
   * Payable: false
   * Constant: true
   * StateMutability: view
   * Type: function
   */
  getDecisionWindow(): MethodConstantReturnContext<string>;
  /**
   * Payable: false
   * Constant: true
   * StateMutability: view
   * Type: function
   */
  getEpochDuration(): MethodConstantReturnContext<string>;
  /**
   * Payable: false
   * Constant: true
   * StateMutability: view
   * Type: function
   */
  getFinalizedEpoch(): MethodConstantReturnContext<string>;
  /**
   * Payable: false
   * Constant: true
   * StateMutability: view
   * Type: function
   */
  getPendingEpoch(): MethodConstantReturnContext<string>;
  /**
   * Payable: false
   * Constant: true
   * StateMutability: view
   * Type: function
   */
  isDecisionWindowOpen(): MethodConstantReturnContext<boolean>;
  /**
   * Payable: false
   * Constant: true
   * StateMutability: view
   * Type: function
   */
  isStarted(): MethodConstantReturnContext<boolean>;
  /**
   * Payable: false
   * Constant: false
   * StateMutability: nonpayable
   * Type: function
   * @param _epochDuration Type: uint256, Indexed: false
   * @param _decisionWindow Type: uint256, Indexed: false
   */
  setEpochProps(_epochDuration: string, _decisionWindow: string): MethodReturnContext;
  /**
   * Payable: false
   * Constant: true
   * StateMutability: view
   * Type: function
   */
  start(): MethodConstantReturnContext<string>;
}
